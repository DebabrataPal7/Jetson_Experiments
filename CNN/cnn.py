# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gYuuZFNAmjWJxTcNeL4027ENNPQbnwox

train_model.py
"""

import tensorflow as tf
import numpy as np

mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train/255.0
x_test = x_test/255.0
x_train = np.expand_dims(x_train, -1)
x_test = np.expand_dims(x_test, -1)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
  tf.keras.layers.MaxPooling2D((2, 2)),
  tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
  tf.keras.layers.MaxPooling2D((2, 2)),
  tf.keras.layers.Flatten(),
  tf.keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))
model.evaluate(x_test, y_test)
model.save('cnn_mnist_model.h5')

"""convert_tflite.py"""

import tensorflow as tf

model = tf.keras.models.load_model('cnn_mnist_model.h5')
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with open('cnn_mnist_model.tflite', 'wb') as f:
    f.write(tflite_model)

"""run_inference.py"""

import tensorflow as tf
import numpy as np
import time
import cv2

interpreter = tf.lite.Interpreter(model_path='cnn_mnist_model.tflite')
interpreter.allocate_tensors()

input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

def preprocess_image(image_path):
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    img = cv2.resize(img, (28, 28))
    img = np.expand_dims(img, axis=-1)
    img = img.astype(np.float32)
    img = np.expand_dims(img, axis=0)
    img = img / 255.0
    return img

image_path = 'test_image.png'
input_data = preprocess_image(image_path)

interpreter.set_tensor(input_details[0]['index'], input_data)
interpreter.invoke()

output_data = interpreter.get_tensor(output_details[0]['index'])
predicted_class = np.argmax(output_data)
print('Predicted class:', predicted_class)

times = []
for i in range(20):
    start_time = time.time()
    interpreter.set_tensor(input_details[0]['index'], input_data)
    interpreter.invoke()
    delta = time.time() - start_time
    times.append(delta)

avg_time = np.mean(times)
fps = 1 / avg_time
print(f"Average time per inference: {avg_time:.4f} seconds, FPS: {fps:.2f}")